// package main

// import (
// 	"a21hc3NpZ25tZW50/model"
// 	"encoding/json"
// 	"fmt"
// 	"io/ioutil"
// 	"net/http"
// 	"os"
// 	"strings"
// )

// func GetStudyProgram() http.HandlerFunc {
// 	return func(w http.ResponseWriter, r *http.Request) {
// 		// TODO: answer here
// 		if r.Method != http.MethodGet {
// 			w.WriteHeader(http.StatusMethodNotAllowed)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Method is not allowed!"})
// 			return
// 		}
// 		studyData, err := ioutil.ReadFile("data/list-study.txt")
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal Server Error"})
// 			return
// 		}
// 		var studies []model.StudyData
// 		lines := strings.Split(string(studyData), "\n")
// 		for _, line := range lines {
// 			fields := strings.Split(line, "_")
// 			if len(fields) == 2 {
// 				study := model.StudyData{
// 					Code: fields[0],
// 					Name: fields[1],
// 				}
// 				studies = append(studies, study)
// 			}
// 		}
// 		// err = json.Unmarshal(studyData, &studies)
// 		// if err != nil {
// 		// 	w.WriteHeader(http.StatusInternalServerError)
// 		// 	json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal Server Error"})
// 		// 	return
// 		// }
// 		w.WriteHeader(http.StatusOK)
// 		w.Header().Set("Content-Type", "application/json")
// 		json.NewEncoder(w).Encode(studies)
// 	}
// }

// func AddUser() http.HandlerFunc {
// 	return func(w http.ResponseWriter, r *http.Request) {
// 		// TODO: answer here
// 		// Check if the method is POST
// 		if r.Method != http.MethodPost {
// 			w.WriteHeader(http.StatusMethodNotAllowed)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Method is not allowed!"})
// 			return
// 		}

// 		// Parse the request body
// 		var user model.User

// 		err := json.NewDecoder(r.Body).Decode(&user)
// 		if err != nil {
// 			w.WriteHeader(http.StatusBadRequest)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Invalid request body"})
// 			return
// 		}

// 		// Check if ID, name, or study is empty
// 		if user.ID == "" || user.Name == "" || user.StudyCode == "" {
// 			w.WriteHeader(http.StatusBadRequest)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "ID, name, or study code is empty"})
// 			return
// 		}

// 		// Check if the user ID already exists
// 		users, err := ioutil.ReadFile("data/list-study.txt")
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 			return
// 		}
// 		// var usersExist bool
// 		// for _, line := range strings.Split(string(users), "\n") {
// 		// 	if strings.HasPrefix(line, user.StudyCode+"_") {
// 		// 		usersExist = true
// 		// 		break
// 		// 	}
// 		// 	if !usersExist {
// 		// 		w.WriteHeader(http.StatusBadRequest)
// 		// 		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "study code not found"})
// 		// 		return
// 		// 	}
// 		// }
// 		lines := strings.Split(string(users), "\n")
// 		for _, line := range lines {
// 			fields := strings.Split(line, "_")
// 			if len(fields) == 2 && fields[0] == user.StudyCode {
// 				if strings.Contains(line, user.ID) {
// 					w.WriteHeader(http.StatusBadRequest)
// 					json.NewEncoder(w).Encode(model.ErrorResponse{Error: "user id already exist"})
// 					return
// 				}
// 			}
// 		}

// 		// Check if the study code exists
// 		studyData, err := ioutil.ReadFile("data/list-study.txt")
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 			return
// 		}
// 		var studyExist bool
// 		for _, line := range strings.Split(string(studyData), "\n") {
// 			if strings.HasPrefix(line, user.StudyCode+"_") {
// 				studyExist = true
// 				break
// 			}
// 		}
// 		if !studyExist {
// 			w.WriteHeader(http.StatusBadRequest)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "study code not found"})
// 			return
// 		}

// 		// Add the user to the file
// 		// _, err = os.OpenFile("data/users.txt", os.O_APPEND, 0644)
// 		// if err != nil {
// 		// 	w.WriteHeader(http.StatusInternalServerError)
// 		// 	json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 		// 	return
// 		// }
// 		f, err := os.OpenFile("data/users.txt", os.O_APPEND, 0644)
// 		if err != nil {
// 			panic(err)
// 		}
// 		defer f.Close()
// 		_, err = fmt.Fprintf(f, "%s,%s,%s\n", user.ID, user.Name, user.StudyCode)
// 		if err != nil {
// 			panic(err)
// 		}

// 		// Return success response
// 		w.WriteHeader(http.StatusOK)
// 		json.NewEncoder(w).Encode(model.SuccessResponse{
// 			Username: user.ID,
// 			Message:  "add user success",
// 		})
// 	}
// }
// func DeleteUser() http.HandlerFunc {
// 	return func(w http.ResponseWriter, r *http.Request) {
// 		// Check if the method is DELETE
// 		if r.Method != http.MethodDelete {
// 			w.WriteHeader(http.StatusMethodNotAllowed)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Method is not allowed!"})
// 			return
// 		}

// 		// Get the user ID from the URL query parameters
// 		userID := r.URL.Query().Get("id")
// 		if userID == "" {
// 			w.WriteHeader(http.StatusBadRequest)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "user id is empty"})
// 			return
// 		}

// 		// Read the list of users
// 		usersData, err := ioutil.ReadFile("data/users.txt")
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 			return
// 		}

// 		// Find the user to delete
// 		lines := strings.Split(string(usersData), "\n")
// 		var found bool
// 		var newLines []string
// 		for _, line := range lines {
// 			fields := strings.Split(line, ",")
// 			if len(fields) == 3 && fields[0] == userID {
// 				found = true
// 				continue
// 			}
// 			if line != "" {
// 				newLines = append(newLines, line)
// 			}
// 		}
// 		if !found {
// 			w.WriteHeader(http.StatusBadRequest)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "user id not found"})
// 			return
// 		}

// 		// Write the updated list of users to the file
// 		newData := []byte(strings.Join(newLines, "\n"))
// 		err = ioutil.WriteFile("data/users.txt", newData, 0644)
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 			return
// 		}

// 		// Return success response
// 		w.WriteHeader(http.StatusOK)
// 		json.NewEncoder(w).Encode(model.SuccessResponse{
// 			Username: userID,
// 			Message:  "delete success",
// 		})
// 	}
// }

// func main() {
// 	http.HandleFunc("/study-program", GetStudyProgram())
// 	http.HandleFunc("/user/add", AddUser())
// 	http.HandleFunc("/user/delete", DeleteUser())

// 	fmt.Println("starting web server at http://localhost:8080")
// 	http.ListenAndServe(":8080", nil)
// }








// package main

// import (
// 	"a21hc3NpZ25tZW50/model"
// 	"encoding/json"
// 	"fmt"
// 	"io/ioutil"
// 	"net/http"
// 	"os"
// 	"strings"
// )

// func GetStudyProgram() http.HandlerFunc {
// 	return func(w http.ResponseWriter, r *http.Request) {
// 		// TODO: answer here
// 		if r.Method != http.MethodGet {
// 			w.WriteHeader(http.StatusMethodNotAllowed)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Method is not allowed!"})
// 			return
// 		}
// 		studyData, err := ioutil.ReadFile("data/list-study.txt")
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal Server Error"})
// 			return
// 		}
// 		var studies []model.StudyData
// 		lines := strings.Split(string(studyData), "\n")
// 		for _, line := range lines {
// 			fields := strings.Split(line, "_")
// 			if len(fields) == 2 {
// 				study := model.StudyData{
// 					Code: fields[0],
// 					Name: fields[1],
// 				}
// 				studies = append(studies, study)
// 			}
// 		}
// 		// err = json.Unmarshal(studyData, &studies)
// 		// if err != nil {
// 		// 	w.WriteHeader(http.StatusInternalServerError)
// 		// 	json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal Server Error"})
// 		// 	return
// 		// }
// 		w.WriteHeader(http.StatusOK)
// 		w.Header().Set("Content-Type", "application/json")
// 		json.NewEncoder(w).Encode(studies)
// 	}
// }

// func AddUser() http.HandlerFunc {
// 	return func(w http.ResponseWriter, r *http.Request) {
// 		// TODO: answer here
// 		// Check if the method is POST
// 		if r.Method != http.MethodPost {
// 			w.WriteHeader(http.StatusMethodNotAllowed)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Method is not allowed!"})
// 			return
// 		}

// 		// Parse the request body
// 		var user model.User

// 		err := json.NewDecoder(r.Body).Decode(&user)
// 		if err != nil {
// 			w.WriteHeader(http.StatusBadRequest)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Invalid request body"})
// 			return
// 		}

// 		// Check if ID, name, or study is empty
// 		if user.ID == "" || user.Name == "" || user.StudyCode == "" {
// 			w.WriteHeader(http.StatusBadRequest)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "ID, name, or study code is empty"})
// 			return
// 		}

// 		// Check if the user ID already exists
// 		users, err := ioutil.ReadFile("data/list-study.txt")
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 			return
// 		}
// 		// var usersExist bool
// 		// for _, line := range strings.Split(string(users), "\n") {
// 		// 	if strings.HasPrefix(line, user.StudyCode+"_") {
// 		// 		usersExist = true
// 		// 		break
// 		// 	}
// 		// 	if !usersExist {
// 		// 		w.WriteHeader(http.StatusBadRequest)
// 		// 		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "study code not found"})
// 		// 		return
// 		// 	}
// 		// }
// 		lines := strings.Split(string(users), "\n")
// 		for _, line := range lines {
// 			fields := strings.Split(line, "_")
// 			if len(fields) == 2 && fields[0] == user.StudyCode {
// 				if strings.Contains(line, user.ID) {
// 					w.WriteHeader(http.StatusBadRequest)
// 					json.NewEncoder(w).Encode(model.ErrorResponse{Error: "user id already exist"})
// 					return
// 				}
// 			}
// 		}

// 		// Check if the study code exists
// 		studyData, err := ioutil.ReadFile("data/list-study.txt")
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 			return
// 		}
// 		var studyExist bool
// 		for _, line := range strings.Split(string(studyData), "\n") {
// 			if strings.HasPrefix(line, user.StudyCode+"_") {
// 				studyExist = true
// 				break
// 			}
// 		}
// 		if !studyExist {
// 			w.WriteHeader(http.StatusBadRequest)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "study code not found"})
// 			return
// 		}

// 		// Add the user to the file
// 		// _, err = os.OpenFile("data/users.txt", os.O_APPEND, 0644)
// 		// if err != nil {
// 		// 	w.WriteHeader(http.StatusInternalServerError)
// 		// 	json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 		// 	return
// 		// }
// 		f, err := os.OpenFile("data/users.txt", os.O_APPEND, 0644)
// 		if err != nil {
// 			panic(err)
// 		}
// 		defer f.Close()
// 		_, err = fmt.Fprintf(f, "%s,%s,%s\n", user.ID, user.Name, user.StudyCode)
// 		if err != nil {
// 			panic(err)
// 		}

// 		// Return success response
// 		w.WriteHeader(http.StatusOK)
// 		json.NewEncoder(w).Encode(model.SuccessResponse{
// 			Username: user.ID,
// 			Message:  "add user success",
// 		})
// 	}
// }

// func DeleteUser() http.HandlerFunc {
// 	return func(w http.ResponseWriter, r *http.Request) {
// 		// TODO: answer here
// 		if r.Method != http.MethodDelete {
// 			w.WriteHeader(http.StatusMethodNotAllowed)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Method is not allowed!"})
// 			return
// 		}
// 		id := r.URL.Query().Get("id")
// 		if id == "" {
// 			w.WriteHeader(http.StatusBadRequest)
// 			errResp := model.ErrorResponse{Error: "user id is empty"}
// 			json.NewEncoder(w).Encode(errResp)
// 			return
// 		}
// 		// Check if the user ID already exists
// 		users, err := ioutil.ReadFile("data/users.txt")
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 			return
// 		}
// 		var user model.User
// 		var usersExist bool = false
// 		for _, line := range strings.Split(string(users), "\n") {
// 			if strings.HasPrefix(line, user.ID+",") {
// 				usersExist = true
// 				break
// 			}
// 			if !usersExist {
// 				w.WriteHeader(http.StatusBadRequest)
// 				json.NewEncoder(w).Encode(model.ErrorResponse{Error: "user id not found"})
// 				return
// 			}
// 		}
// 		// Remove the user from the slice
// 		var userIndex int
// 		users = append(users[:userIndex], users[userIndex+1:]...)

// 		// Write the updated users slice back to the file
// 		users, err = json.MarshalIndent(users, "", "\t")
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 			return
// 		}
// 		err = ioutil.WriteFile("data/users.txt", users, 0644)
// 		if err != nil {
// 			w.WriteHeader(http.StatusInternalServerError)
// 			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Internal server error"})
// 			return
// 		}

// 		// Return success response
// 		successResp := model.SuccessResponse{
// 			Username: id,
// 			Message:  "delete success",
// 		}
// 		w.WriteHeader(http.StatusOK)
// 		json.NewEncoder(w).Encode(successResp)
// 	}
// }

// func main() {
// 	http.HandleFunc("/study-program", GetStudyProgram())
// 	http.HandleFunc("/user/add", AddUser())
// 	http.HandleFunc("/user/delete", DeleteUser())

// 	fmt.Println("starting web server at http://localhost:8080")
// 	http.ListenAndServe(":8080", nil)
// }
